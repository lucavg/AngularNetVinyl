{"ast":null,"code":"import { of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SpotifyService = /*#__PURE__*/(() => {\n  class SpotifyService {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n    }\n    searchAlbum(searchQuery) {\n      return this.searchAlbumAsync(searchQuery).pipe(switchMap(response => {\n        return of(response);\n      }));\n    }\n    searchAlbumAsync(searchQuery) {\n      return this.http.get(this.baseUrl + 'api/v1/spotify/search/albums', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        params: {\n          query: searchQuery\n        }\n      });\n    }\n    searchArtist(searchQuery) {\n      return this.searchArtistAsync(searchQuery).pipe(switchMap(response => {\n        return of(response);\n      }));\n    }\n    searchArtistAsync(searchQuery) {\n      return this.http.get(this.baseUrl + 'api/v1/spotify/search/artist', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        params: {\n          query: searchQuery\n        }\n      });\n    }\n    getAlbum(searchQuery) {\n      return this.getAlbumAsync(searchQuery).pipe(switchMap(response => {\n        return of(response);\n      }));\n    }\n    getAlbumAsync(searchQuery) {\n      return this.http.get(this.baseUrl + 'api/v1/spotify/get/album', {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        params: {\n          query: searchQuery\n        }\n      });\n    }\n  }\n  SpotifyService.ɵfac = function SpotifyService_Factory(t) {\n    return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n  SpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyService,\n    factory: SpotifyService.ɵfac,\n    providedIn: 'root'\n  });\n  return SpotifyService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}