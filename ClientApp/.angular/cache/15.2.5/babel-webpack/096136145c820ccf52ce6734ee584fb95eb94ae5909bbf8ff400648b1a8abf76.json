{"ast":null,"code":"import _asyncToGenerator from \"D:/AngularNetVinyl/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n    this.isAuthenticated = this.checkTokenValidity();\n  }\n  isLoggedIn() {\n    return this.isAuthenticated;\n  }\n  register(registerData) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return _this.http.post('/api/v1/authenticate/register', registerData);\n    })();\n  }\n  login(loginData) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return _this2.http.post('/api/v1/authenticate/login', loginData).pipe(tap(response => {\n        if (response && response.success) {\n          // Set the JWT token, username, and userId in local storage or any other storage mechanism\n          localStorage.setItem('accessToken', response.accessToken);\n          console.log(response.accessToken);\n          localStorage.setItem('username', response.username);\n          console.log(response.username);\n          localStorage.setItem('userId', response.userId);\n          console.log(response.userId);\n          // Update the authentication status\n          _this2.isAuthenticated = true;\n        }\n      }));\n    })();\n  }\n  logout() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n    this.isAuthenticated = false;\n  }\n  checkTokenValidity() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return true;\n    }\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,oBAAe,GAAY,KAAK;IAGtC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;EAClD;EAEAC,UAAU;IACR,OAAO,IAAI,CAACF,eAAe;EAC7B;EAEMG,QAAQ,CAACC,YAAiB;IAAA;IAAA;MAC9B,OAAO,KAAI,CAACL,IAAI,CAACM,IAAI,CAAM,+BAA+B,EAAED,YAAY,CAAC;IAAC;EAC5E;EAEME,KAAK,CAACC,SAAc;IAAA;IAAA;MACxB,OAAO,MAAI,CAACR,IAAI,CAACM,IAAI,CAAM,4BAA4B,EAAEE,SAAS,CAAC,CAACC,IAAI,CACtEZ,GAAG,CAACa,QAAQ,IAAG;QACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;UAChC;UACAC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,QAAQ,CAACI,WAAW,CAAC;UACzDC,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACI,WAAW,CAAC;UACjCF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAACO,QAAQ,CAAC;UACnDF,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACO,QAAQ,CAAC;UAC9BL,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,QAAQ,CAACQ,MAAM,CAAC;UAC/CH,OAAO,CAACC,GAAG,CAACN,QAAQ,CAACQ,MAAM,CAAC;UAC5B;UACA,MAAI,CAACjB,eAAe,GAAG,IAAI;;MAE/B,CAAC,CAAC,CACH;IAAC;EACJ;EAEAkB,MAAM;IACJP,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC;IACtCR,YAAY,CAACQ,UAAU,CAAC,UAAU,CAAC;IACnCR,YAAY,CAACQ,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAACnB,eAAe,GAAG,KAAK;EAC9B;EAEQC,kBAAkB;IACxB,MAAMmB,KAAK,GAAGT,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAID,KAAK,EAAE;MACT,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;;AAhDWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["tap","AuthService","constructor","http","isAuthenticated","checkTokenValidity","isLoggedIn","register","registerData","post","login","loginData","pipe","response","success","localStorage","setItem","accessToken","console","log","username","userId","logout","removeItem","token","getItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated: boolean = false;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.isAuthenticated = this.checkTokenValidity();\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  async register(registerData: any): Promise<Observable<any>> {\r\n    return this.http.post<any>('/api/v1/authenticate/register', registerData);\r\n  }\r\n\r\n  async login(loginData: any): Promise<Observable<any>> {\r\n    return this.http.post<any>('/api/v1/authenticate/login', loginData).pipe(\r\n      tap(response => {\r\n        if (response && response.success) {\r\n          // Set the JWT token, username, and userId in local storage or any other storage mechanism\r\n          localStorage.setItem('accessToken', response.accessToken);\r\n          console.log(response.accessToken);\r\n          localStorage.setItem('username', response.username);\r\n          console.log(response.username);\r\n          localStorage.setItem('userId', response.userId);\r\n          console.log(response.userId);\r\n          // Update the authentication status\r\n          this.isAuthenticated = true;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('userId');\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  private checkTokenValidity(): boolean {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}