{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n    this.isAuthenticated = this.checkTokenValidity();\n  }\n  isLoggedIn() {\n    return this.isAuthenticated;\n  }\n  register(registerData) {\n    console.log(registerData);\n    return this.http.post('https://localhost:44429/api/v1/authenticate/register', registerData).pipe(tap(response => {\n      if (response && response.success) {\n        console.log(response.message);\n        this.isAuthenticated = true;\n      } else {\n        console.log('Registration failed');\n      }\n    }));\n  }\n  login(loginData) {\n    return this.http.post('/api/v1/authenticate/login', loginData).pipe(tap(response => {\n      if (response && response.success) {\n        localStorage.setItem('accessToken', response.accessToken);\n        localStorage.setItem('username', response.username);\n        localStorage.setItem('userId', response.userId);\n        this.isAuthenticated = true;\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n    this.isAuthenticated = false;\n  }\n  checkTokenValidity() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return true;\n    }\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,oBAAe,GAAY,KAAK;IAGtC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;EAClD;EAEAC,UAAU;IACR,OAAO,IAAI,CAACF,eAAe;EAC7B;EAEAG,QAAQ,CAACC,YAAiB;IACxBC,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;IACzB,OAAO,IAAI,CAACL,IAAI,CAACQ,IAAI,CAAM,sDAAsD,EAAEH,YAAY,CAAC,CAACI,IAAI,CAACZ,GAAG,CAACa,QAAQ,IAAG;MACnH,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;QAChCL,OAAO,CAACC,GAAG,CAACG,QAAQ,CAACE,OAAO,CAAC;QAC7B,IAAI,CAACX,eAAe,GAAG,IAAI;OAC5B,MAAM;QACLK,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;IAEtC,CAAC,CAAC,CAAC;EACL;EAEAM,KAAK,CAACC,SAAc;IAClB,OAAO,IAAI,CAACd,IAAI,CAACQ,IAAI,CAAM,4BAA4B,EAAEM,SAAS,CAAC,CAACL,IAAI,CACtEZ,GAAG,CAACa,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;QAChCI,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEN,QAAQ,CAACO,WAAW,CAAC;QACzDF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEN,QAAQ,CAACQ,QAAQ,CAAC;QACnDH,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEN,QAAQ,CAACS,MAAM,CAAC;QAC/C,IAAI,CAAClB,eAAe,GAAG,IAAI;;IAE/B,CAAC,CAAC,CACH;EACH;EAEAmB,MAAM;IACJL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACtCN,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;IACnCN,YAAY,CAACM,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAACpB,eAAe,GAAG,KAAK;EAC9B;EAEQC,kBAAkB;IACxB,MAAMoB,KAAK,GAAGP,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAID,KAAK,EAAE;MACT,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;;AAnDWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["tap","AuthService","constructor","http","isAuthenticated","checkTokenValidity","isLoggedIn","register","registerData","console","log","post","pipe","response","success","message","login","loginData","localStorage","setItem","accessToken","username","userId","logout","removeItem","token","getItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated: boolean = false;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.isAuthenticated = this.checkTokenValidity();\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  register(registerData: any): Observable<any> {\r\n    console.log(registerData);\r\n    return this.http.post<any>('https://localhost:44429/api/v1/authenticate/register', registerData).pipe(tap(response => {\r\n      if (response && response.success) {\r\n        console.log(response.message);\r\n        this.isAuthenticated = true;\r\n      } else {\r\n        console.log('Registration failed');\r\n      }\r\n    }));\r\n  }\r\n\r\n  login(loginData: any): Observable<any> {\r\n    return this.http.post<any>('/api/v1/authenticate/login', loginData).pipe(\r\n      tap(response => {\r\n        if (response && response.success) {\r\n          localStorage.setItem('accessToken', response.accessToken);\r\n          localStorage.setItem('username', response.username);\r\n          localStorage.setItem('userId', response.userId);\r\n          this.isAuthenticated = true;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('userId');\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  private checkTokenValidity(): boolean {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}