{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// import { error } from 'console';\nexport class AuthService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.isAuthenticated = false;\n    this.isAuthenticated = this.checkTokenValidity();\n  }\n  isLoggedIn() {\n    return this.isAuthenticated;\n  }\n  register(registerData) {\n    return this.registerAsync(registerData).subscribe({\n      complete: () => {\n        const loginData = {\n          Email: this.email,\n          Password: this.password\n        };\n        this.authService.login(loginData).subscribe({\n          complete: result => {\n            this.router.navigate(['']);\n          },\n          error: () => {\n            console.log('Login failed');\n          }\n        });\n      },\n      error: () => {\n        console.log('Registration failed');\n      }\n    });\n  }\n  registerAsync(registerData) {\n    return this.http.post(this.baseUrl + 'api/v1/authenticate/register', JSON.stringify(registerData), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  login(loginData) {\n    return this.http.post(this.baseUrl + '/api/v1/authenticate/login', JSON.stringify(loginData), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  logout() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n    this.isAuthenticated = false;\n  }\n  checkTokenValidity() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return true;\n    }\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA;AAKA,OAAM,MAAOA,WAAW;EAGtBC,YACUC,IAAgB,EACIC,OAAe;IADnC,SAAI,GAAJD,IAAI;IACgB,YAAO,GAAPC,OAAO;IAJ7B,oBAAe,GAAY,KAAK;IAMtC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;EAClD;EAEAC,UAAU;IACR,OAAO,IAAI,CAACF,eAAe;EAC7B;EAEAG,QAAQ,CAACC,YAA6B;IACpC,OAAO,IAAI,CAACC,aAAa,CAACD,YAAY,CAAC,CAACE,SAAS,CAAC;MAChDC,QAAQ,EAAE,MAAK;QACb,MAAMC,SAAS,GAAiB;UAC9BC,KAAK,EAAE,IAAI,CAACC,KAAK;UACjBC,QAAQ,EAAE,IAAI,CAACC;SAChB;QAED,IAAI,CAACC,WAAW,CAACC,KAAK,CAACN,SAAS,CAAC,CAACF,SAAS,CAAC;UAC1CC,QAAQ,EAAGQ,MAAM,IAAI;YACnB,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;UAC5B,CAAC;UACDC,KAAK,EAAE,MAAK;YACVC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAC7B;SACD,CAAC;MACJ,CAAC;MACDF,KAAK,EAAE,MAAK;QACVC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MACpC;KACD,CAAC;EACJ;EAEAf,aAAa,CAACD,YAA6B;IACzC,OAAO,IAAI,CAACN,IAAI,CAACuB,IAAI,CACnB,IAAI,CAACtB,OAAO,GAAG,8BAA8B,EAC7CuB,IAAI,CAACC,SAAS,CAACnB,YAAY,CAAC,EAC5B;MAAEoB,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAAE,CAAE,CACpD;EACH;EAEAV,KAAK,CAACN,SAAuB;IAC3B,OAAO,IAAI,CAACV,IAAI,CAACuB,IAAI,CACnB,IAAI,CAACtB,OAAO,GAAG,4BAA4B,EAC3CuB,IAAI,CAACC,SAAS,CAACf,SAAS,CAAC,EACzB;MACEgB,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;KAC9C,CACF;EACH;EAEAC,MAAM;IACJC,YAAY,CAACC,UAAU,CAAC,aAAa,CAAC;IACtCD,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;IACnCD,YAAY,CAACC,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAAC3B,eAAe,GAAG,KAAK;EAC9B;EAEQC,kBAAkB;IACxB,MAAM2B,KAAK,GAAGF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAID,KAAK,EAAE;MACT,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;;AAtEWhC,WAAW;mBAAXA,WAAW,0CAKZ,UAAU;AAAA;AALTA,WAAW;SAAXA,WAAW;EAAAkC,SAAXlC,WAAW;EAAAmC,YAFV;AAAM","names":["AuthService","constructor","http","baseUrl","isAuthenticated","checkTokenValidity","isLoggedIn","register","registerData","registerAsync","subscribe","complete","loginData","Email","email","Password","password","authService","login","result","router","navigate","error","console","log","post","JSON","stringify","headers","logout","localStorage","removeItem","token","getItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { RegisterRequest } from '../interfaces/RegisterRequest';\r\nimport { RegisterResponse } from '../interfaces/RegisterResponse';\r\nimport { LoginRequest } from '../interfaces/LoginRequest';\r\nimport { LoginResponse } from '../interfaces/LoginResponse';\r\n// import { error } from 'console';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated: boolean = false;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('BASE_URL') private baseUrl: string\r\n  ) {\r\n    this.isAuthenticated = this.checkTokenValidity();\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  register(registerData: RegisterRequest): RegisterResponse {\r\n    return this.registerAsync(registerData).subscribe({\r\n      complete: () => {\r\n        const loginData: LoginRequest = {\r\n          Email: this.email,\r\n          Password: this.password,\r\n        };\r\n\r\n        this.authService.login(loginData).subscribe({\r\n          complete: (result) => {\r\n            this.router.navigate(['']);\r\n          },\r\n          error: () => {\r\n            console.log('Login failed');\r\n          },\r\n        });\r\n      },\r\n      error: () => {\r\n        console.log('Registration failed');\r\n      },\r\n    });\r\n  }\r\n\r\n  registerAsync(registerData: RegisterRequest): Observable<RegisterResponse> {\r\n    return this.http.post<RegisterResponse>(\r\n      this.baseUrl + 'api/v1/authenticate/register',\r\n      JSON.stringify(registerData),\r\n      { headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n  }\r\n\r\n  login(loginData: LoginRequest): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(\r\n      this.baseUrl + '/api/v1/authenticate/login',\r\n      JSON.stringify(loginData),\r\n      {\r\n        headers: { 'Content-Type': 'application/json' },\r\n      }\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('userId');\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  private checkTokenValidity(): boolean {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}