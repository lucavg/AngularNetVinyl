{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// import { error } from 'console';\nexport class AuthService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.isAuthenticated = false;\n    this.isAuthenticated = this.checkTokenValidity();\n  }\n  isLoggedIn() {\n    return this.isAuthenticated;\n  }\n  register(registerData) {\n    return this.http.post(this.baseUrl + 'api/v1/authenticate/register', JSON.stringify(registerData), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  login(loginData) {\n    return this.http.post(this.baseUrl + '/api/v1/authenticate/login', JSON.stringify(loginData), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    pipe(tap(response => {\n      if (response && response.Success) {\n        localStorage.setItem('accessToken', response.accessToken);\n        localStorage.setItem('username', response.username);\n        localStorage.setItem('userId', response.userId);\n        this.isAuthenticated = true;\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n    this.isAuthenticated = false;\n  }\n  checkTokenValidity() {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return true;\n    }\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC;AAKA,OAAM,MAAOC,WAAW;EAGtBC,YACUC,IAAgB,EACIC,OAAe;IADnC,SAAI,GAAJD,IAAI;IACgB,YAAO,GAAPC,OAAO;IAJ7B,oBAAe,GAAY,KAAK;IAMtC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;EAClD;EAEAC,UAAU;IACR,OAAO,IAAI,CAACF,eAAe;EAC7B;EAEAG,QAAQ,CAACC,YAA6B;IACpC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CACnB,IAAI,CAACN,OAAO,GAAG,8BAA8B,EAC7CO,IAAI,CAACC,SAAS,CAACH,YAAY,CAAC,EAC5B;MAAEI,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAAE,CAAE,CACpD;EACH;EAEAC,KAAK,CAACC,SAAuB;IAC3B,OAAO,IAAI,CAACZ,IAAI,CACbO,IAAI,CACH,IAAI,CAACN,OAAO,GAAG,4BAA4B,EAC3CO,IAAI,CAACC,SAAS,CAACG,SAAS,CAAC,EACzB;MACEF,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;KAC9C,CACF;IACAG,IAAI,CACHhB,GAAG,CAAEiB,QAAQ,IAAI;MACf,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;QAChCC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,QAAQ,CAACI,WAAW,CAAC;QACzDF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAACK,QAAQ,CAAC;QACnDH,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEH,QAAQ,CAACM,MAAM,CAAC;QAC/C,IAAI,CAAClB,eAAe,GAAG,IAAI;;IAE/B,CAAC,CAAC,CACH;EACL;EAEAmB,MAAM;IACJL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACtCN,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;IACnCN,YAAY,CAACM,UAAU,CAAC,QAAQ,CAAC;IACjC,IAAI,CAACpB,eAAe,GAAG,KAAK;EAC9B;EAEQC,kBAAkB;IACxB,MAAMoB,KAAK,GAAGP,YAAY,CAACQ,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAID,KAAK,EAAE;MACT,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;;AA1DWzB,WAAW;mBAAXA,WAAW,0CAKZ,UAAU;AAAA;AALTA,WAAW;SAAXA,WAAW;EAAA2B,SAAX3B,WAAW;EAAA4B,YAFV;AAAM","names":["tap","AuthService","constructor","http","baseUrl","isAuthenticated","checkTokenValidity","isLoggedIn","register","registerData","post","JSON","stringify","headers","login","loginData","pipe","response","Success","localStorage","setItem","accessToken","username","userId","logout","removeItem","token","getItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { RegisterRequest } from '../interfaces/RegisterRequest';\r\nimport { RegisterResponse } from '../interfaces/RegisterResponse';\r\nimport { LoginRequest } from '../interfaces/LoginRequest';\r\nimport { LoginResponse } from '../interfaces/LoginResponse';\r\n// import { error } from 'console';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated: boolean = false;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('BASE_URL') private baseUrl: string\r\n  ) {\r\n    this.isAuthenticated = this.checkTokenValidity();\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  register(registerData: RegisterRequest): Observable<RegisterResponse> {\r\n    return this.http.post<RegisterResponse>(\r\n      this.baseUrl + 'api/v1/authenticate/register',\r\n      JSON.stringify(registerData),\r\n      { headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n  }\r\n\r\n  login(loginData: LoginRequest): Observable<LoginResponse> {\r\n    return this.http\r\n      .post<LoginResponse>(\r\n        this.baseUrl + '/api/v1/authenticate/login',\r\n        JSON.stringify(loginData),\r\n        {\r\n          headers: { 'Content-Type': 'application/json' },\r\n        }\r\n      );\r\n      .pipe(\r\n        tap((response) => {\r\n          if (response && response.Success) {\r\n            localStorage.setItem('accessToken', response.accessToken);\r\n            localStorage.setItem('username', response.username);\r\n            localStorage.setItem('userId', response.userId);\r\n            this.isAuthenticated = true;\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('userId');\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  private checkTokenValidity(): boolean {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}