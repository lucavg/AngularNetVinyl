{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isAuthenticated = false;\n    // Check if a valid JWT token exists during initialization\n    this.isAuthenticated = this.checkTokenValidity();\n  }\n  isLoggedIn() {\n    return this.isAuthenticated;\n  }\n  register(registerData) {\n    return this.http.post('/api/v1/authenticate/register', registerData);\n  }\n  login(loginData) {\n    return this.http.post('/api/v1/authenticate/login', loginData).pipe(tap(response => {\n      if (response && response.success) {\n        // Set the JWT token in local storage or any other storage mechanism\n        localStorage.setItem('token', response.accessToken);\n        // Update the authentication status\n        this.isAuthenticated = true;\n      }\n    }));\n  }\n  logout() {\n    // Remove the JWT token from storage\n    localStorage.removeItem('token');\n    // Update the authentication status\n    this.isAuthenticated = false;\n  }\n  checkTokenValidity() {\n    // Retrieve the JWT token from storage\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Add your JWT token validation logic here\n      // For example, you can decode the token and check its expiration\n      // If the token is valid, return true\n      // Otherwise, return false\n      return true;\n    }\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,oBAAe,GAAY,KAAK;IAGtC;IACA,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;EAClD;EAEAC,UAAU;IACR,OAAO,IAAI,CAACF,eAAe;EAC7B;EAEAG,QAAQ,CAACC,YAAiB;IACxB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAM,+BAA+B,EAAED,YAAY,CAAC;EAC3E;EAEAE,KAAK,CAACC,SAAc;IAClB,OAAO,IAAI,CAACR,IAAI,CAACM,IAAI,CAAM,4BAA4B,EAAEE,SAAS,CAAC,CAACC,IAAI,CACtEZ,GAAG,CAACa,QAAQ,IAAG;MACb,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,OAAO,EAAE;QAChC;QACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACI,WAAW,CAAC;QACnD;QACA,IAAI,CAACb,eAAe,GAAG,IAAI;;IAE/B,CAAC,CAAC,CACH;EACH;EAEAc,MAAM;IACJ;IACAH,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;IAChC;IACA,IAAI,CAACf,eAAe,GAAG,KAAK;EAC9B;EAEQC,kBAAkB;IACxB;IACA,MAAMe,KAAK,GAAGL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAID,KAAK,EAAE;MACT;MACA;MACA;MACA;MACA,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd;;AAjDWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["tap","AuthService","constructor","http","isAuthenticated","checkTokenValidity","isLoggedIn","register","registerData","post","login","loginData","pipe","response","success","localStorage","setItem","accessToken","logout","removeItem","token","getItem","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated: boolean = false;\r\n\r\n  constructor(private http: HttpClient) {\r\n    // Check if a valid JWT token exists during initialization\r\n    this.isAuthenticated = this.checkTokenValidity();\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  register(registerData: any): Observable<any> {\r\n    return this.http.post<any>('/api/v1/authenticate/register', registerData);\r\n  }\r\n\r\n  login(loginData: any): Observable<any> {\r\n    return this.http.post<any>('/api/v1/authenticate/login', loginData).pipe(\r\n      tap(response => {\r\n        if (response && response.success) {\r\n          // Set the JWT token in local storage or any other storage mechanism\r\n          localStorage.setItem('token', response.accessToken);\r\n          // Update the authentication status\r\n          this.isAuthenticated = true;\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    // Remove the JWT token from storage\r\n    localStorage.removeItem('token');\r\n    // Update the authentication status\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  private checkTokenValidity(): boolean {\r\n    // Retrieve the JWT token from storage\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token) {\r\n      // Add your JWT token validation logic here\r\n      // For example, you can decode the token and check its expiration\r\n      // If the token is valid, return true\r\n      // Otherwise, return false\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}