{"ast":null,"code":"import { of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpotifyService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  searchArtist(searchQuery) {\n    return this.searchArtistAsync(searchQuery).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  searchArtistAsync(searchQuery) {\n    return this.http.get(this.baseUrl + 'api/v1/spotify/search/artist?query=' + searchQuery, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  searchAlbum(searchQuery) {\n    return this.searchAlbumAsync(searchQuery).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  searchAlbumAsync(searchQuery) {\n    return this.http.get(this.baseUrl + 'api/v1/spotify/search/albums?query=' + searchQuery, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n}\nSpotifyService.ɵfac = function SpotifyService_Factory(t) {\n  return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nSpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotifyService,\n  factory: SpotifyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,EAAEC,SAAS,QAAQ,MAAM;;;AAOhD,OAAM,MAAOC,cAAc;EACzBC,YACUC,IAAgB,EACIC,OAAe;IADnC,SAAI,GAAJD,IAAI;IACgB,YAAO,GAAPC,OAAO;EAClC;EAEHC,YAAY,CAACC,WAAmB;IAC9B,OAAO,IAAI,CAACC,iBAAiB,CAACD,WAAW,CAAC,CAACE,IAAI,CAC7CR,SAAS,CAAES,QAAQ,IAAI;MACrB,OAAOV,EAAE,CAACU,QAAQ,CAAC;IACrB,CAAC,CAAC,CACH;EACH;EAEAF,iBAAiB,CAACD,WAAmB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAClB,IAAI,CAACN,OAAO,GAAG,qCAAqC,GAAGE,WAAW,EAClE;MAAEK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAAE,CAAE,CACpD;EACH;EAEAC,WAAW,CAACN,WAAmB;IAC7B,OAAO,IAAI,CAACO,gBAAgB,CAACP,WAAW,CAAC,CAACE,IAAI,CAC5CR,SAAS,CAAES,QAAQ,IAAI;MACrB,OAAOV,EAAE,CAACU,QAAQ,CAAC;IACrB,CAAC,CAAC,CACH;EACH;EAEAI,gBAAgB,CAACP,WAAmB;IAClC,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAClB,IAAI,CAACN,OAAO,GAAG,qCAAqC,GAAGE,WAAW,EAClE;MAAEK,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAAE,CAAE,CACpD;EACH;;AAlCWV,cAAc;mBAAdA,cAAc,0CAGf,UAAU;AAAA;AAHTA,cAAc;SAAdA,cAAc;EAAAa,SAAdb,cAAc;EAAAc,YAFb;AAAM","names":["of","switchMap","SpotifyService","constructor","http","baseUrl","searchArtist","searchQuery","searchArtistAsync","pipe","response","get","headers","searchAlbum","searchAlbumAsync","factory","providedIn"],"sourceRoot":"","sources":["/home/exorra/Documents/GitHub/AngularNetVinyl/ClientApp/src/app/services/spotify.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, switchMap } from 'rxjs';\nimport { AlbumResponse } from '../interfaces/Spotify/Search/AlbumResponse';\nimport { ArtistResponse } from '../interfaces/Spotify/Search/ArtistResponse';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SpotifyService {\n  constructor(\n    private http: HttpClient,\n    @Inject('BASE_URL') private baseUrl: string\n  ) {}\n\n  searchArtist(searchQuery: string): Observable<ArtistResponse[]> {\n    return this.searchArtistAsync(searchQuery).pipe(\n      switchMap((response) => {\n        return of(response);\n      })\n    );\n  }\n\n  searchArtistAsync(searchQuery: string): Observable<ArtistResponse[]> {\n    return this.http.get<ArtistResponse[]>(\n      this.baseUrl + 'api/v1/spotify/search/artist?query=' + searchQuery,\n      { headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n\n  searchAlbum(searchQuery: string): Observable<AlbumResponse[]> {\n    return this.searchAlbumAsync(searchQuery).pipe(\n      switchMap((response) => {\n        return of(response);\n      })\n    );\n  }\n\n  searchAlbumAsync(searchQuery: string): Observable<AlbumResponse[]> {\n    return this.http.get<AlbumResponse[]>(\n      this.baseUrl + 'api/v1/spotify/search/albums?query=' + searchQuery,\n      { headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}