{"ast":null,"code":"import { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.isAuthenticated = false;\n    this.isAuthenticated = this.checkTokenValidity();\n  }\n  isLoggedIn() {\n    return this.isAuthenticated;\n  }\n  cleanStorage() {\n    localStorage.removeItem('jwt');\n    localStorage.removeItem('username');\n    localStorage.removeItem('userId');\n  }\n  register(registerData) {\n    this.cleanStorage();\n    return this.registerAsync(registerData).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  registerAsync(registerData) {\n    return this.http.post(this.baseUrl + 'api/v1/authenticate/register', JSON.stringify(registerData), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  login(loginData) {\n    this.cleanStorage();\n    return this.loginAsync(loginData).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  loginAsync(loginData) {\n    return this.http.post(this.baseUrl + 'api/v1/authenticate/login', JSON.stringify(loginData), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n  logout() {\n    this.cleanStorage();\n    this.isAuthenticated = false;\n  }\n  checkTokenValidity() {\n    const token = localStorage.getItem('jwt'); // Update token key to match the one you're using\n    if (token) {\n      try {\n        const decodedToken = jwt_decode(token);\n        const expirationDate = new Date(decodedToken.exp * 1000); // Convert expiration time to milliseconds\n        const currentDate = new Date();\n        if (expirationDate > currentDate) {\n          return true;\n        }\n      } catch (error) {\n        console.log('Invalid token:', error);\n      }\n    }\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,SAAS,QAAQ,gBAAgB;AAK1C,OAAOC,UAAU,MAAM,YAAY;;;AAKnC,OAAM,MAAOC,WAAW;EAGtBC,YACUC,IAAgB,EACIC,OAAe;IADnC,SAAI,GAAJD,IAAI;IACgB,YAAO,GAAPC,OAAO;IAJ7B,oBAAe,GAAY,KAAK;IAMtC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;EAClD;EAEAC,UAAU;IACR,OAAO,IAAI,CAACF,eAAe;EAC7B;EAEAG,YAAY;IACVC,YAAY,CAACC,UAAU,CAAC,KAAK,CAAC;IAC9BD,YAAY,CAACC,UAAU,CAAC,UAAU,CAAC;IACnCD,YAAY,CAACC,UAAU,CAAC,QAAQ,CAAC;EACnC;EAEAC,QAAQ,CAACC,YAA6B;IACpC,IAAI,CAACJ,YAAY,EAAE;IACnB,OAAO,IAAI,CAACK,aAAa,CAACD,YAAY,CAAC,CAACE,IAAI,CAC1Cf,SAAS,CAAEgB,QAA0B,IAAI;MACvC,OAAOjB,EAAE,CAACiB,QAAQ,CAAC;IACrB,CAAC,CAAC,CACH;EACH;EAEAF,aAAa,CAACD,YAA6B;IACzC,OAAO,IAAI,CAACT,IAAI,CAACa,IAAI,CACnB,IAAI,CAACZ,OAAO,GAAG,8BAA8B,EAC7Ca,IAAI,CAACC,SAAS,CAACN,YAAY,CAAC,EAC5B;MAAEO,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;IAAE,CAAE,CACpD;EACH;EAEAC,KAAK,CAACC,SAAuB;IAC3B,IAAI,CAACb,YAAY,EAAE;IACnB,OAAO,IAAI,CAACc,UAAU,CAACD,SAAS,CAAC,CAACP,IAAI,CACpCf,SAAS,CAAEgB,QAAuB,IAAI;MACpC,OAAOjB,EAAE,CAACiB,QAAQ,CAAC;IACrB,CAAC,CAAC,CACH;EACH;EAEAO,UAAU,CAACD,SAAuB;IAChC,OAAO,IAAI,CAAClB,IAAI,CAACa,IAAI,CACnB,IAAI,CAACZ,OAAO,GAAG,2BAA2B,EAC1Ca,IAAI,CAACC,SAAS,CAACG,SAAS,CAAC,EACzB;MACEF,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB;KAC9C,CACF;EACH;EAEAI,MAAM;IACJ,IAAI,CAACf,YAAY,EAAE;IACnB,IAAI,CAACH,eAAe,GAAG,KAAK;EAC9B;EAEQC,kBAAkB;IACxB,MAAMkB,KAAK,GAAGf,YAAY,CAACgB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;IAE3C,IAAID,KAAK,EAAE;MACT,IAAI;QACF,MAAME,YAAY,GAAQ1B,UAAU,CAACwB,KAAK,CAAC;QAC3C,MAAMG,cAAc,GAAG,IAAIC,IAAI,CAACF,YAAY,CAACG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC;QAC1D,MAAMC,WAAW,GAAG,IAAIF,IAAI,EAAE;QAC9B,IAAID,cAAc,GAAGG,WAAW,EAAE;UAChC,OAAO,IAAI;;OAEd,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC;;;IAIxC,OAAO,KAAK;EACd;;AA9EW9B,WAAW;mBAAXA,WAAW,0CAKZ,UAAU;AAAA;AALTA,WAAW;SAAXA,WAAW;EAAAiC,SAAXjC,WAAW;EAAAkC,YAFV;AAAM","names":["of","switchMap","jwt_decode","AuthService","constructor","http","baseUrl","isAuthenticated","checkTokenValidity","isLoggedIn","cleanStorage","localStorage","removeItem","register","registerData","registerAsync","pipe","response","post","JSON","stringify","headers","login","loginData","loginAsync","logout","token","getItem","decodedToken","expirationDate","Date","exp","currentDate","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { RegisterRequest } from '../interfaces/RegisterRequest';\r\nimport { RegisterResponse } from '../interfaces/RegisterResponse';\r\nimport { LoginRequest } from '../interfaces/LoginRequest';\r\nimport { LoginResponse } from '../interfaces/LoginResponse';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated: boolean = false;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('BASE_URL') private baseUrl: string\r\n  ) {\r\n    this.isAuthenticated = this.checkTokenValidity();\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return this.isAuthenticated;\r\n  }\r\n\r\n  cleanStorage(): void {\r\n    localStorage.removeItem('jwt');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('userId');\r\n  }\r\n\r\n  register(registerData: RegisterRequest): Observable<RegisterResponse> {\r\n    this.cleanStorage();\r\n    return this.registerAsync(registerData).pipe(\r\n      switchMap((response: RegisterResponse) => {\r\n        return of(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  registerAsync(registerData: RegisterRequest): Observable<RegisterResponse> {\r\n    return this.http.post<RegisterResponse>(\r\n      this.baseUrl + 'api/v1/authenticate/register',\r\n      JSON.stringify(registerData),\r\n      { headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n  }\r\n\r\n  login(loginData: LoginRequest): Observable<LoginResponse> {\r\n    this.cleanStorage();\r\n    return this.loginAsync(loginData).pipe(\r\n      switchMap((response: LoginResponse) => {\r\n        return of(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  loginAsync(loginData: LoginRequest): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(\r\n      this.baseUrl + 'api/v1/authenticate/login',\r\n      JSON.stringify(loginData),\r\n      {\r\n        headers: { 'Content-Type': 'application/json' },\r\n      }\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    this.cleanStorage();\r\n    this.isAuthenticated = false;\r\n  }\r\n\r\n  private checkTokenValidity(): boolean {\r\n    const token = localStorage.getItem('jwt'); // Update token key to match the one you're using\r\n\r\n    if (token) {\r\n      try {\r\n        const decodedToken: any = jwt_decode(token);\r\n        const expirationDate = new Date(decodedToken.exp * 1000); // Convert expiration time to milliseconds\r\n        const currentDate = new Date();\r\n        if (expirationDate > currentDate) {\r\n          return true;\r\n        }\r\n      } catch (error) {\r\n        console.log('Invalid token:', error);\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}