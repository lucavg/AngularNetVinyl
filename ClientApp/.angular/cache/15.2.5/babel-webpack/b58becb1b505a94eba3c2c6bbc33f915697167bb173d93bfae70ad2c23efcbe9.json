{"ast":null,"code":"import { of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CollectionService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.apiUrl = 'api/v1/collections';\n  }\n  getAllCollections() {\n    return this.http.get(this.baseUrl + `${this.apiUrl}/all`);\n  }\n  getCollection(id) {\n    return this.http.get(this.baseUrl + `${this.apiUrl}/get`, {\n      params: {\n        id: id\n      }\n    });\n  }\n  createCollection(collection) {\n    return this.http.post(this.baseUrl + `${this.apiUrl}/create`, {\n      params: {\n        collection: collection\n      }\n    });\n  }\n  updateCollection(id, collection) {\n    return this.http.put(`this.baseUrl + ${this.apiUrl}/update`, {\n      params: {\n        id: id,\n        collection: collection\n      }\n    });\n  }\n  deleteCollection(id) {\n    return this.http.delete(this.baseUrl + `${this.apiUrl}/delete`, {\n      params: {\n        id: id\n      }\n    });\n  }\n  addAlbumToCollection(collectionId, album) {\n    return this.addAlbumToCollectionAsync(collectionId, album).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  addAlbumToCollectionAsync(collectionId, album) {\n    return this.http.post(this.baseUrl + `${this.apiUrl}/addAlbum`, {\n      CollectionId: collectionId,\n      AlbumId: album.id\n    });\n  }\n  updateAlbumInCollection(collectionId, albumId, album) {\n    return this.http.put(this.baseUrl + `${this.apiUrl}/updateAlbum`, {\n      params: {\n        collectionId: collectionId,\n        albumId: albumId,\n        album: album\n      }\n    });\n  }\n  removeAlbumFromCollection(collectionId, album) {\n    return this.removeAlbumFromCollectionAsync(collectionId, album).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  removeAlbumFromCollectionAsync(collectionId, album) {\n    return this.http.post(this.baseUrl + `${this.apiUrl}/deleteAlbum`, {\n      CollectionId: collectionId,\n      AlbumId: album\n    });\n  }\n}\nCollectionService.ɵfac = function CollectionService_Factory(t) {\n  return new (t || CollectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nCollectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CollectionService,\n  factory: CollectionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","switchMap","CollectionService","constructor","http","baseUrl","getAllCollections","get","apiUrl","getCollection","id","params","createCollection","collection","post","updateCollection","put","deleteCollection","delete","addAlbumToCollection","collectionId","album","addAlbumToCollectionAsync","pipe","response","CollectionId","AlbumId","updateAlbumInCollection","albumId","removeAlbumFromCollection","removeAlbumFromCollectionAsync","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\app\\services\\collection.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { Collection } from '../interfaces/Collection/Collection';\r\nimport { AlbumResponse } from '../interfaces/Spotify/Search/AlbumResponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CollectionService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('BASE_URL') private baseUrl: string\r\n  ) {}\r\n\r\n  private apiUrl = 'api/v1/collections';\r\n\r\n  getAllCollections(): Observable<Collection[]> {\r\n    return this.http.get<Collection[]>(this.baseUrl + `${this.apiUrl}/all`);\r\n  }\r\n\r\n  getCollection(id: string): Observable<Collection> {\r\n    return this.http.get<Collection>(this.baseUrl + `${this.apiUrl}/get`, {\r\n      params: { id: id },\r\n    });\r\n  }\r\n\r\n  createCollection(collection: Collection): Observable<Collection> {\r\n    return this.http.post<Collection>(this.baseUrl + `${this.apiUrl}/create`, {\r\n      params: { collection: collection },\r\n    });\r\n  }\r\n\r\n  updateCollection(id: string, collection: Collection): Observable<void> {\r\n    return this.http.put<void>(`this.baseUrl + ${this.apiUrl}/update`, {\r\n      params: { id: id, collection: collection },\r\n    });\r\n  }\r\n\r\n  deleteCollection(id: string): Observable<void> {\r\n    return this.http.delete<void>(this.baseUrl + `${this.apiUrl}/delete`, {\r\n      params: { id: id },\r\n    });\r\n  }\r\n\r\n  addAlbumToCollection(\r\n    collectionId: string,\r\n    album: AlbumResponse\r\n  ): Observable<any> {\r\n    return this.addAlbumToCollectionAsync(collectionId, album).pipe(\r\n      switchMap((response) => {\r\n        return of(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  addAlbumToCollectionAsync(\r\n    collectionId: string,\r\n    album: AlbumResponse\r\n  ): Observable<Collection> {\r\n    return this.http.post<Collection>(\r\n      this.baseUrl + `${this.apiUrl}/addAlbum`,\r\n      { CollectionId: collectionId, AlbumId: album.id }\r\n    );\r\n  }\r\n\r\n  updateAlbumInCollection(\r\n    collectionId: string,\r\n    albumId: string,\r\n    album: AlbumResponse\r\n  ): Observable<void> {\r\n    return this.http.put<void>(this.baseUrl + `${this.apiUrl}/updateAlbum`, {\r\n      params: {\r\n        collectionId: collectionId,\r\n        albumId: albumId,\r\n        album: album,\r\n      },\r\n    });\r\n  }\r\n\r\n  removeAlbumFromCollection(\r\n    collectionId: string,\r\n    album: string\r\n  ): Observable<any> {\r\n    return this.removeAlbumFromCollectionAsync(collectionId, album).pipe(\r\n      switchMap((response) => {\r\n        return of(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  removeAlbumFromCollectionAsync(\r\n    collectionId: string,\r\n    album: string\r\n  ): Observable<Collection> {\r\n    return this.http.post<Collection>(\r\n      this.baseUrl + `${this.apiUrl}/deleteAlbum`,\r\n      { CollectionId: collectionId, AlbumId: album }\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}