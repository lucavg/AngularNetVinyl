{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet RegisterComponent = class RegisterComponent {\n  constructor(authService, router, refreshService) {\n    this.authService = authService;\n    this.router = router;\n    this.refreshService = refreshService;\n    this.email = '';\n    this.username = '';\n    this.password = '';\n    this.confirmPassword = '';\n  }\n  register() {\n    if (this.password !== this.confirmPassword) {\n      console.log(\"Passwords don't match\");\n      return;\n    }\n    const registerData = {\n      email: this.email,\n      username: this.username,\n      password: this.password,\n      confirmPassword: this.confirmPassword\n    };\n    try {\n      this.authService.register(registerData).subscribe({\n        next: () => {\n          const loginData = {\n            email: this.email,\n            password: this.password\n          };\n          this.authService.login(loginData).subscribe({\n            next: response => {\n              localStorage.setItem('jwt', response.accessToken);\n              localStorage.setItem('username', response.username);\n              localStorage.setItem('userId', response.userId);\n              localStorage.setItem('collectionId', response.collectionId);\n              this.cdRef.detectChanges();\n              this.router.navigate(['/']);\n            },\n            error: () => {\n              console.log('Login failed');\n            }\n          });\n        },\n        error: () => {\n          console.log('Registration failed');\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html'\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAA4BA,SAAS,QAAQ,eAAe;AAWrD,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAM5BC,YACUC,WAAwB,EACxBC,MAAc,EACdC,cAA8B;IAF9B,gBAAW,GAAXF,WAAW;IACX,WAAM,GAANC,MAAM;IACN,mBAAc,GAAdC,cAAc;IARxB,UAAK,GAAW,EAAE;IAClB,aAAQ,GAAW,EAAE;IACrB,aAAQ,GAAW,EAAE;IACrB,oBAAe,GAAW,EAAE;EAMzB;EAEHC,QAAQ;IACN,IAAI,IAAI,CAACC,QAAQ,KAAK,IAAI,CAACC,eAAe,EAAE;MAC1CC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC;;IAGF,MAAMC,YAAY,GAAoB;MACpCC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBN,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,eAAe,EAAE,IAAI,CAACA;KACvB;IAED,IAAI;MACF,IAAI,CAACL,WAAW,CAACG,QAAQ,CAACK,YAAY,CAAC,CAACG,SAAS,CAAC;QAChDC,IAAI,EAAE,MAAK;UACT,MAAMC,SAAS,GAAiB;YAC9BJ,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBL,QAAQ,EAAE,IAAI,CAACA;WAChB;UACD,IAAI,CAACJ,WAAW,CAACc,KAAK,CAACD,SAAS,CAAC,CAACF,SAAS,CAAC;YAC1CC,IAAI,EAAGG,QAAuB,IAAI;cAChCC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEF,QAAQ,CAACG,WAAW,CAAC;cACjDF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,QAAQ,CAACL,QAAQ,CAAC;cACnDM,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEF,QAAQ,CAACI,MAAM,CAAC;cAC/CH,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEF,QAAQ,CAACK,YAAY,CAAC;cAC3D,IAAI,CAACC,KAAK,CAACC,aAAa,EAAE;cAC1B,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;YAC7B,CAAC;YACDC,KAAK,EAAE,MAAK;cACVlB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;YAC7B;WACD,CAAC;QACJ,CAAC;QACDiB,KAAK,EAAE,MAAK;UACVlB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACpC;OACD,CAAC;KACH,CAAC,OAAOiB,KAAK,EAAE;MACdlB,OAAO,CAACC,GAAG,CAACiB,KAAK,CAAC;;EAEtB;CACD;AAtDY1B,iBAAiB,eAJ7BD,SAAS,CAAC;EACT4B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE;CACd,CAAC,GACW5B,iBAAiB,CAsD7B;SAtDYA,iBAAiB","names":["Component","RegisterComponent","constructor","authService","router","refreshService","register","password","confirmPassword","console","log","registerData","email","username","subscribe","next","loginData","login","response","localStorage","setItem","accessToken","userId","collectionId","cdRef","detectChanges","navigate","error","selector","templateUrl"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { ChangeDetectorRef, Component } from '@angular/core';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { LoginRequest } from '../interfaces/Auth/LoginRequest';\r\nimport { LoginResponse } from '../interfaces/Auth/LoginResponse';\r\nimport { RegisterRequest } from '../interfaces/Auth/RegisterRequest';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent {\r\n  email: string = '';\r\n  username: string = '';\r\n  password: string = '';\r\n  confirmPassword: string = '';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private refreshService: RefreshService\r\n  ) {}\r\n\r\n  register() {\r\n    if (this.password !== this.confirmPassword) {\r\n      console.log(\"Passwords don't match\");\r\n      return;\r\n    }\r\n\r\n    const registerData: RegisterRequest = {\r\n      email: this.email,\r\n      username: this.username,\r\n      password: this.password,\r\n      confirmPassword: this.confirmPassword,\r\n    };\r\n\r\n    try {\r\n      this.authService.register(registerData).subscribe({\r\n        next: () => {\r\n          const loginData: LoginRequest = {\r\n            email: this.email,\r\n            password: this.password,\r\n          };\r\n          this.authService.login(loginData).subscribe({\r\n            next: (response: LoginResponse) => {\r\n              localStorage.setItem('jwt', response.accessToken);\r\n              localStorage.setItem('username', response.username);\r\n              localStorage.setItem('userId', response.userId);\r\n              localStorage.setItem('collectionId', response.collectionId);\r\n              this.cdRef.detectChanges();\r\n              this.router.navigate(['/']);\r\n            },\r\n            error: () => {\r\n              console.log('Login failed');\r\n            },\r\n          });\r\n        },\r\n        error: () => {\r\n          console.log('Registration failed');\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}