{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpotifyService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n  searchAlbum(searchQuery) {\n    return this.searchAlbumAsync(searchQuery).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  searchAlbumAsync(searchQuery) {\n    return this.http.get(this.baseUrl + 'api/v1/spotify/search/albums', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      params: {\n        query: searchQuery\n      }\n    });\n  }\n  searchArtist(searchQuery) {\n    return this.searchArtistAsync(searchQuery).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  searchArtistAsync(searchQuery) {\n    return this.http.get(this.baseUrl + 'api/v1/spotify/search/artist', {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      params: {\n        query: searchQuery\n      }\n    });\n  }\n  getAlbum(searchQuery) {\n    return this.getAlbumAsync(searchQuery).pipe(switchMap(response => {\n      return of(response);\n    }));\n  }\n  getAlbumAsync(searchQuery) {\n    const params = new HttpParams().set('query', searchQuery);\n    return this.http.get(this.baseUrl + 'api/v1/spotify/get/album', {\n      params\n    });\n  }\n}\nSpotifyService.ɵfac = function SpotifyService_Factory(t) {\n  return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nSpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotifyService,\n  factory: SpotifyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAAqBC,EAAE,EAAEC,SAAS,QAAQ,MAAM;;;AAQhD,OAAM,MAAOC,cAAc;EACzBC,YACUC,IAAgB,EACIC,OAAe;IADnC,SAAI,GAAJD,IAAI;IACgB,YAAO,GAAPC,OAAO;EAClC;EAEHC,WAAW,CAACC,WAAmB;IAC7B,OAAO,IAAI,CAACC,gBAAgB,CAACD,WAAW,CAAC,CAACE,IAAI,CAC5CR,SAAS,CAAES,QAAQ,IAAI;MACrB,OAAOV,EAAE,CAACU,QAAQ,CAAC;IACrB,CAAC,CAAC,CACH;EACH;EAEAF,gBAAgB,CAACD,WAAmB;IAClC,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAClB,IAAI,CAACN,OAAO,GAAG,8BAA8B,EAC7C;MACEO,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB,CAAE;MAC/CC,MAAM,EAAE;QAAEC,KAAK,EAAEP;MAAW;KAC7B,CACF;EACH;EAEAQ,YAAY,CAACR,WAAmB;IAC9B,OAAO,IAAI,CAACS,iBAAiB,CAACT,WAAW,CAAC,CAACE,IAAI,CAC7CR,SAAS,CAAES,QAAQ,IAAI;MACrB,OAAOV,EAAE,CAACU,QAAQ,CAAC;IACrB,CAAC,CAAC,CACH;EACH;EAEAM,iBAAiB,CAACT,WAAmB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAClB,IAAI,CAACN,OAAO,GAAG,8BAA8B,EAC7C;MACEO,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB,CAAE;MAC/CC,MAAM,EAAE;QAAEC,KAAK,EAAEP;MAAW;KAC7B,CACF;EACH;EAEAU,QAAQ,CAACV,WAAmB;IAC1B,OAAO,IAAI,CAACW,aAAa,CAACX,WAAW,CAAC,CAACE,IAAI,CACzCR,SAAS,CAAES,QAAQ,IAAI;MACrB,OAAOV,EAAE,CAACU,QAAQ,CAAC;IACrB,CAAC,CAAC,CACH;EACH;EAEAQ,aAAa,CAACX,WAAmB;IAC/B,MAAMM,MAAM,GAAG,IAAId,UAAU,EAAE,CAACoB,GAAG,CAAC,OAAO,EAAEZ,WAAW,CAAC;IAEzD,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAClB,IAAI,CAACN,OAAO,GAAG,0BAA0B,EACzC;MAAEQ;IAAM,CAAE,CACX;EACH;;AAzDWX,cAAc;mBAAdA,cAAc,0CAGf,UAAU;AAAA;AAHTA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YAFb;AAAM","names":["HttpParams","of","switchMap","SpotifyService","constructor","http","baseUrl","searchAlbum","searchQuery","searchAlbumAsync","pipe","response","get","headers","params","query","searchArtist","searchArtistAsync","getAlbum","getAlbumAsync","set","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\app\\services\\spotify.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { AlbumResponse } from '../interfaces/Spotify/Search/AlbumResponse';\r\nimport { ArtistResponse } from '../interfaces/Spotify/Search/ArtistResponse';\r\nimport { AlbumComplete } from '../interfaces/Spotify/Search/AlbumComplete';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SpotifyService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('BASE_URL') private baseUrl: string\r\n  ) {}\r\n\r\n  searchAlbum(searchQuery: string): Observable<AlbumResponse[]> {\r\n    return this.searchAlbumAsync(searchQuery).pipe(\r\n      switchMap((response) => {\r\n        return of(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  searchAlbumAsync(searchQuery: string): Observable<AlbumResponse[]> {\r\n    return this.http.get<AlbumResponse[]>(\r\n      this.baseUrl + 'api/v1/spotify/search/albums',\r\n      {\r\n        headers: { 'Content-Type': 'application/json' },\r\n        params: { query: searchQuery },\r\n      }\r\n    );\r\n  }\r\n\r\n  searchArtist(searchQuery: string): Observable<ArtistResponse[]> {\r\n    return this.searchArtistAsync(searchQuery).pipe(\r\n      switchMap((response) => {\r\n        return of(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  searchArtistAsync(searchQuery: string): Observable<ArtistResponse[]> {\r\n    return this.http.get<ArtistResponse[]>(\r\n      this.baseUrl + 'api/v1/spotify/search/artist',\r\n      {\r\n        headers: { 'Content-Type': 'application/json' },\r\n        params: { query: searchQuery },\r\n      }\r\n    );\r\n  }\r\n\r\n  getAlbum(searchQuery: string): Observable<AlbumComplete> {\r\n    return this.getAlbumAsync(searchQuery).pipe(\r\n      switchMap((response) => {\r\n        return of(response);\r\n      })\r\n    );\r\n  }\r\n\r\n  getAlbumAsync(searchQuery: string): Observable<AlbumComplete> {\r\n    const params = new HttpParams().set('query', searchQuery);\r\n\r\n    return this.http.get<AlbumComplete>(\r\n      this.baseUrl + 'api/v1/spotify/get/album',\r\n      { params }\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}