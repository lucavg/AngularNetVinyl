{"ast":null,"code":"import { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport jwt_decode from 'jwt-decode';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.baseUrl = baseUrl;\n      this.isAuthenticated = false;\n      this.isAuthenticated = this.checkTokenValidity();\n    }\n    isLoggedIn() {\n      return this.isAuthenticated;\n    }\n    cleanStorage() {\n      localStorage.removeItem('jwt');\n      localStorage.removeItem('username');\n      localStorage.removeItem('userId');\n      localStorage.removeItem('collectionId');\n    }\n    getUsername() {\n      return localStorage.getItem('username');\n    }\n    register(registerData) {\n      this.cleanStorage();\n      return this.registerAsync(registerData).pipe(switchMap(response => {\n        return of(response);\n      }));\n    }\n    registerAsync(registerData) {\n      return this.http.post(this.baseUrl + 'api/v1/authenticate/register', JSON.stringify(registerData), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    login(loginData) {\n      this.cleanStorage();\n      return this.loginAsync(loginData).pipe(switchMap(response => {\n        return of(response);\n      }));\n    }\n    loginAsync(loginData) {\n      return this.http.post(this.baseUrl + 'api/v1/authenticate/login', JSON.stringify(loginData), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    logout() {\n      this.cleanStorage();\n      this.isAuthenticated = false;\n    }\n    checkTokenValidity() {\n      const token = localStorage.getItem('jwt');\n      if (token) {\n        try {\n          const decodedToken = jwt_decode(token);\n          const expirationDate = new Date(decodedToken.exp * 1000);\n          const currentDate = new Date();\n          if (expirationDate > currentDate) {\n            return true;\n          }\n        } catch (error) {\n          console.log('Invalid token:', error);\n        }\n      }\n      return false;\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}