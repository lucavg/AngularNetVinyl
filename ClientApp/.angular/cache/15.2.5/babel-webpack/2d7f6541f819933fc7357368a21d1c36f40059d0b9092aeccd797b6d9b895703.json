{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CollectionService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.apiUrl = 'api/v1/collections';\n  }\n  getAllCollections() {\n    return this.http.get(`${this.apiUrl}/all`);\n  }\n  getCollection(id) {\n    return this.http.get(`${this.apiUrl}/get`);\n  }\n  createCollection(collection) {\n    return this.http.post(`${this.apiUrl}/create`, {\n      params: {\n        collection: collection\n      }\n    });\n  }\n  updateCollection(id, collection) {\n    return this.http.put(`${this.apiUrl}/update`, {\n      params: {\n        id: id,\n        collection: collection\n      }\n    });\n  }\n  deleteCollection(id) {\n    return this.http.delete(`${this.apiUrl}/delete`, {\n      params: {\n        id: id\n      }\n    });\n  }\n  addAlbumToCollection(collectionId, album) {\n    return this.http.post(`${this.apiUrl}/addAlbum`, {\n      params: {\n        collectionId: collectionId,\n        album: album\n      }\n    });\n  }\n  updateAlbumInCollection(collectionId, albumId, album) {\n    return this.http.put(`${this.apiUrl}/updateAlbum`, {\n      params: {\n        collectionId: collectionId,\n        albumId: albumId,\n        album: album\n      }\n    });\n  }\n  removeAlbumFromCollection(collectionId, albumId) {\n    return this.http.delete(`${this.apiUrl}/deleteAlbum`, {\n      params: {\n        collectionId: collectionId,\n        albumId: albumId\n      }\n    });\n  }\n}\nCollectionService.ɵfac = function CollectionService_Factory(t) {\n  return new (t || CollectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nCollectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CollectionService,\n  factory: CollectionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,iBAAiB;EAC5BC,YACUC,IAAgB,EACIC,OAAe;IADnC,SAAI,GAAJD,IAAI;IACgB,YAAO,GAAPC,OAAO;IAG7B,WAAM,GAAG,oBAAoB;EAFlC;EAIHC,iBAAiB;IACf,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,GAAG,IAAI,CAACC,MAAM,MAAM,CAAC;EAC1D;EAEAC,aAAa,CAACC,EAAU;IACtB,OAAO,IAAI,CAACN,IAAI,CAACG,GAAG,CAAa,GAAG,IAAI,CAACC,MAAM,MAAM,CAAC;EACxD;EAEAG,gBAAgB,CAACC,UAAsB;IACrC,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAa,GAAG,IAAI,CAACL,MAAM,SAAS,EAAE;MACzDM,MAAM,EAAE;QAAEF,UAAU,EAAEA;MAAU;KACjC,CAAC;EACJ;EAEAG,gBAAgB,CAACL,EAAU,EAAEE,UAAsB;IACjD,OAAO,IAAI,CAACR,IAAI,CAACY,GAAG,CAAO,GAAG,IAAI,CAACR,MAAM,SAAS,EAAE;MAClDM,MAAM,EAAE;QAAEJ,EAAE,EAAEA,EAAE;QAAEE,UAAU,EAAEA;MAAU;KACzC,CAAC;EACJ;EAEAK,gBAAgB,CAACP,EAAU;IACzB,OAAO,IAAI,CAACN,IAAI,CAACc,MAAM,CAAO,GAAG,IAAI,CAACV,MAAM,SAAS,EAAE;MACrDM,MAAM,EAAE;QAAEJ,EAAE,EAAEA;MAAE;KACjB,CAAC;EACJ;EAEAS,oBAAoB,CAClBC,YAAoB,EACpBC,KAAoB;IAEpB,OAAO,IAAI,CAACjB,IAAI,CAACS,IAAI,CAAa,GAAG,IAAI,CAACL,MAAM,WAAW,EAAE;MAC3DM,MAAM,EAAE;QACNM,YAAY,EAAEA,YAAY;QAC1BC,KAAK,EAAEA;;KAEV,CAAC;EACJ;EAEAC,uBAAuB,CACrBF,YAAoB,EACpBG,OAAe,EACfF,KAAoB;IAEpB,OAAO,IAAI,CAACjB,IAAI,CAACY,GAAG,CAAO,GAAG,IAAI,CAACR,MAAM,cAAc,EAAE;MACvDM,MAAM,EAAE;QACNM,YAAY,EAAEA,YAAY;QAC1BG,OAAO,EAAEA,OAAO;QAChBF,KAAK,EAAEA;;KAEV,CAAC;EACJ;EAEAG,yBAAyB,CACvBJ,YAAoB,EACpBG,OAAe;IAEf,OAAO,IAAI,CAACnB,IAAI,CAACc,MAAM,CAAO,GAAG,IAAI,CAACV,MAAM,cAAc,EAAE;MAC1DM,MAAM,EAAE;QAAEM,YAAY,EAAEA,YAAY;QAAEG,OAAO,EAAEA;MAAO;KACvD,CAAC;EACJ;;AAnEWrB,iBAAiB;mBAAjBA,iBAAiB,0CAGlB,UAAU;AAAA;AAHTA,iBAAiB;SAAjBA,iBAAiB;EAAAuB,SAAjBvB,iBAAiB;EAAAwB,YAFhB;AAAM","names":["CollectionService","constructor","http","baseUrl","getAllCollections","get","apiUrl","getCollection","id","createCollection","collection","post","params","updateCollection","put","deleteCollection","delete","addAlbumToCollection","collectionId","album","updateAlbumInCollection","albumId","removeAlbumFromCollection","factory","providedIn"],"sourceRoot":"","sources":["D:\\AngularNetVinyl\\ClientApp\\src\\app\\services\\collection.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { Collection } from '../interfaces/Collection/Collection';\r\nimport { AlbumResponse } from '../interfaces/Spotify/Search/AlbumResponse';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CollectionService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject('BASE_URL') private baseUrl: string\r\n  ) {}\r\n\r\n  private apiUrl = 'api/v1/collections';\r\n\r\n  getAllCollections(): Observable<Collection[]> {\r\n    return this.http.get<Collection[]>(`${this.apiUrl}/all`);\r\n  }\r\n\r\n  getCollection(id: string): Observable<Collection> {\r\n    return this.http.get<Collection>(`${this.apiUrl}/get`);\r\n  }\r\n\r\n  createCollection(collection: Collection): Observable<Collection> {\r\n    return this.http.post<Collection>(`${this.apiUrl}/create`, {\r\n      params: { collection: collection },\r\n    });\r\n  }\r\n\r\n  updateCollection(id: string, collection: Collection): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/update`, {\r\n      params: { id: id, collection: collection },\r\n    });\r\n  }\r\n\r\n  deleteCollection(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/delete`, {\r\n      params: { id: id },\r\n    });\r\n  }\r\n\r\n  addAlbumToCollection(\r\n    collectionId: string,\r\n    album: AlbumResponse\r\n  ): Observable<Collection> {\r\n    return this.http.post<Collection>(`${this.apiUrl}/addAlbum`, {\r\n      params: {\r\n        collectionId: collectionId,\r\n        album: album,\r\n      },\r\n    });\r\n  }\r\n\r\n  updateAlbumInCollection(\r\n    collectionId: string,\r\n    albumId: string,\r\n    album: AlbumResponse\r\n  ): Observable<void> {\r\n    return this.http.put<void>(`${this.apiUrl}/updateAlbum`, {\r\n      params: {\r\n        collectionId: collectionId,\r\n        albumId: albumId,\r\n        album: album,\r\n      },\r\n    });\r\n  }\r\n\r\n  removeAlbumFromCollection(\r\n    collectionId: string,\r\n    albumId: string\r\n  ): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/deleteAlbum`, {\r\n      params: { collectionId: collectionId, albumId: albumId },\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}